/*
捡星星

问题描述

作为探险家的你某天意外获得了一张羊皮纸，上面有一行小字以及一堆你看不明白的0和1，你原本以为是一道很久之前的数学题，于是找了很多数学家请教。一番周折之后，一个博学的数学家告诉你，这不是数学题而是一张地图，那些0和1即组成了一张地图，旁边的小字上写的是：每个孤岛都是一颗星星。

那个博学的数学家经过仔细研究后告诉你：这张羊皮纸上的 1 应该是代表陆地、0 代表大海，那行小字所指的孤岛应该是指完全被大海包围的陆地、且每块陆地仅和水平/垂直方向上的陆地相连，另外，因为这片大陆从来没有人到达过，所以他推测这应该是一片被大海包围的未知大陆。

你十分高兴，决定出发去捡星星，但是你首先想知道一共要捡多少颗星星、才知道你这一趟探险需要大概多长时间。

输入格式

已知羊皮纸上的0和1是整齐排列的，一共 row 行、col 列（0 < row,col < 512）。

第一行和第二行依次输入 row 和 col。

接下来 row 行，依次输入 col 数字，数字仅为 0 或 1。

输出格式

输出你这一趟旅行需要捡多少颗星星。

输入样例

样例1

输入：
4
5
0 0 1 1 0
1 1 0 1 0
1 1 0 1 0
1 0 0 0 0

输出：
2

解释：由颜色标注出的两部分即为两个孤岛

8-示例1

样例2

输入：
3
6
1 1 0 0 0 0
0 0 0 0 0 0
0 0 0 0 1 0

输出：
2

解释：由颜色标注出的两部分即为两个孤岛

8-示例2

*/
/*
#include<iostream>
using namespace std;

int T[600][600];

int dfs(int i, int j) {
	if (T[i][j] == 0) return 0;
	else {
		T[i][j] = 0;
		dfs(i + 1, j);
		dfs(i - 1, j);
		dfs(i, j + 1);
		dfs(i, j - 1);
		return 1;
	}
}

void solution_2() {
	int row, col; cin >> row >> col;
	for (int i = 1; i <= row; i++) {
		for (int j = 1; j <= col; j++) {
			cin >> T[i][j];
		}
	}

	int sum = 0;
	for (int i = 1; i <= row; i++) {
		for (int j = 1; j <= col; j++) {
			sum += dfs(i, j);
		}
	}
	cout << sum << endl;
}

int main() {
	solution_2();
	return 0;
}
*/