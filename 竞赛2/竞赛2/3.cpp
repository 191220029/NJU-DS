/*
K 近邻

在 3D 笛卡尔坐标系中，定义了两个操作：
•加入（Add）：新加入一个坐标为 (X, Y, Z) 的点。
•查询（Query）：找出当前距离原点最近的前 K 个点（题目保证此时点的总数大于等于 K），返回他们和原点的距离的平均值；之后删除这 K 个点。

你的任务就是使用合适的数据结构，来维护这个点集，并高效地完成这两个操作。

输入格式

输入的第一行是一个整数 M，表示接下来有 M 行。每行对应一个操作，有两种格式：
•A x y z：对应“加入”操作，表示新加入一个坐标为 (x, y, z) 的点。（x, y, z 均为 [-1, 1] 区间内的浮点数）
•Q K: 对应“查询操作，请你找出当前距离原点最近的前 K 个点，返回他们和原点的距离的平均值（小数点后保留五位），并删除这 K 个点。（K 为 [1, 9] 区间内的整数）

友情提醒
•M 不超过 1e6。这意味着点的总数也一定不会超过 1e6 个。
•每次操作的时间复杂度应该在 log N 级别（N 是点的总数），否则你的代码将超时。
•输入输出最好使用 scanf/printf 而不是 cin/cout，否则你也有可能超时。
•建议使用 %.5f 来格式化输出。

样例输入
9
A 0.7 0.7 0.7
A 0.5 0.5 0.5
A 0.6 0.6 0.6
Q 2
A 0.8 0.8 0.8
A 0 0 0
A 0.1 0.1 0.1
Q 3
Q 1

样例输出
0.95263
0.46188
1.38564

*/