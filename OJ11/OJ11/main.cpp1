#include<iostream>
//#include<string>

using namespace std;

const int MAX_NUM = 102;
int heights[MAX_NUM][MAX_NUM];
bool visited[MAX_NUM][MAX_NUM];
int rows, cols;

int ans = 0;
//int mem[MAX_NUM][MAX_NUM];

void init_vst() {
	for (int i = 0; i < MAX_NUM; i++) {
		for (int j = 0; j < MAX_NUM; j++) {
			visited[i][j] = 0;
		}
	}
}

int my_abs(int a) {
	return (a < 0) ? -a : a;
}

bool find_path(int x, int y, int cur_max) {//if there is path with gap < cur_max, return true;
	
	if (x == rows - 1 && y == cols - 1) {
		return true;
	}
	bool flag = false;
	visited[x][y] = true;
	if (x + 1 < rows && !visited[x + 1][y]) {
		int temp = my_abs(heights[x + 1][y] - heights[x][y]);
		if (temp <= cur_max)
			flag |= find_path(x + 1, y, cur_max);
	}
	if (x - 1 >= 0 && !visited[x - 1][y]) {
		int temp = my_abs(heights[x - 1][y] - heights[x][y]);
		if (temp <= cur_max)
			flag |= find_path(x - 1, y, cur_max);
	}
	if (y + 1 < cols && !visited[x][y + 1]) {
		int temp = my_abs(heights[x][y + 1] - heights[x][y]);
		if (temp <= cur_max)
			flag |= find_path(x, y + 1, cur_max);
	}
	if (y - 1 >= 0 && !visited[x][y - 1]) {
		int temp = my_abs(heights[x][y - 1] - heights[x][y]);
		if (temp <= cur_max)
			flag |= find_path(x, y - 1, cur_max);
	}
	return flag;
}

void solution_1() {
	cin >> rows >> cols;
	for (int i = 0; i < rows; i++)
		for (int j = 0; j < cols; j++)
			cin >> heights[i][j];
	//endfor
	
	int left = 0, right = 1000000;
	int mid;
	while (left <= right) {
		mid = (left + right) / 2;

		init_vst();

		if (find_path(0, 0, mid)) { //find if path with max_gap <= mid
			right = mid - 1;
			ans = mid; //possible biggest ans is mid, maybe there is smaller one, so decrease 'right' and search again until 'left > right'
		}
		else {
			left = mid + 1;
		}
	}
	
	cout << ans << endl;
}

int main() {
	solution_1();
	return 0;
}